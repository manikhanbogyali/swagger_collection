swagger: '2.0'
info:
  version: '1.0'
  title: Postman Echo
  description: >-
    Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.


    The documentation for the endpoints as well as example responses can be found at [https://echo.getpostman.com](https://echo.getpostman.com?source=echo-collection-app-onboarding)
  contact: {}
host: echo.getpostman.com
basePath: /
securityDefinitions:
  auth:
    type: basic
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /digest-auth:
    get:
      description: >-
        Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.

        The `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.


        When this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.

        These variables are re-used in subsequent request for seamless integration of the two requests.
      summary: DigestAuth Request
      tags:
      - 'Auth: Digest'
      operationId: DigestAuthGet
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
  /basic-auth:
    get:
      description: "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app."
      summary: Basic Auth
      tags:
      - 'Auth: Others'
      operationId: BasicAuthGet
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/200'
          examples:
            application/json; charset=utf-8:
              authenticated: true
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 42
            Date:
              type: string
              default: Sat, 31 Oct 2015 06:38:25 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /oauth1:
    get:
      description: "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes."
      summary: OAuth1.0 Verify Signature
      tags:
      - 'Auth: Others'
      operationId: Oauth1Get
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: Authorization
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Success'
          examples:
            application/json; charset=utf-8:
              status: pass
              message: OAuth-1.0a signature verification was successful
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 95
            Date:
              type: string
              default: Thu, 31 Mar 2016 11:06:58 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
      security: []
  /auth/hawk:
    get:
      description: >-
        This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).


        In order to use this endpoint, select the "Hawk Auth" helper inside Postman, and set the following values:


        Hawk Auth ID: `dh37fgj492je`


        Hawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`


        Algorithm: `sha256`


        The rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.
      summary: Hawk Auth
      tags:
      - 'Auth: Others'
      operationId: AuthHawkGet
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Success'
          examples:
            application/json:
              status: pass
              message: Hawk Authentication successful
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Date:
              type: string
              default: Thu, 31 Mar 2016 11:12:16 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Server-Authorization:
              type: string
              default: Hawk mac="vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=", hash="qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE="
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
            transfer-encoding:
              type: string
              default: chunked
  /cookies/set:
    get:
      description: >-
        The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.


        To set your own set of cookies, simply replace the URL parameters "foo1=bar1&foo2=bar2" with your own set of key-value pairs.
      summary: Set Cookies
      tags:
      - Cookies
      operationId: CookiesSetGet
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: foo1
        in: query
        required: true
        type: string
        description: ''
      - name: foo2
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Cookies'
          examples:
            application/json; charset=utf-8:
              cookies:
                foo1: bar
                foo2: bar
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 51
            Date:
              type: string
              default: Thu, 29 Oct 2015 06:15:28 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /cookies/delete:
    get:
      description: One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.
      summary: Delete Cookies
      tags:
      - Cookies
      operationId: CookiesDeleteGet
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: foo1
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/CookiesResponse'
          examples:
            application/json; charset=utf-8:
              cookies:
                foo2: bar
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 46
            Date:
              type: string
              default: Thu, 29 Oct 2015 06:16:00 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /cookies:
    get:
      description: Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the "Set Cookies" endpoint, will be returned as response JSON.
      summary: Get Cookies
      tags:
      - Cookies
      operationId: CookiesGet
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Cookies3'
          examples:
            application/json; charset=utf-8:
              cookies:
                foo2: bar
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 46
            Date:
              type: string
              default: Thu, 29 Oct 2015 06:16:29 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /headers:
    get:
      description: >-
        A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.

        In Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.
      summary: Request Headers
      tags:
      - Headers
      operationId: HeadersGet
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters:
      - name: my-sample-header
        in: header
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/my-sample-header'
          examples:
            application/json; charset=utf-8:
              headers:
                host: echo.getpostman.com
                accept: '*/*'
                accept-encoding: gzip, deflate, sdch
                accept-language: en-US,en;q=0.8
                cache-control: no-cache
                my-sample-header: Lorem ipsum dolor sit amet
                postman-token: 3c8ea80b-f599-fba6-e0b4-a0910440e7b6
                user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36
                x-forwarded-port: 443
                x-forwarded-proto: https
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 342
            Date:
              type: string
              default: Thu, 31 Mar 2016 11:14:00 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /response-headers:
    get:
      description: >-
        This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.


        To send your own set of headers, simply add or replace the the URL parameters with your own set.
      summary: Response Headers
      tags:
      - Headers
      operationId: ResponseHeadersGet
      deprecated: false
      produces:
      - text/html; charset=utf-8
      parameters:
      - name: Content-Type
        in: query
        required: true
        type: string
        description: ''
      - name: test
        in: query
        required: true
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Responseheaders'
          examples:
            text/html; charset=utf-8:
              Content-Type: text/html
              test: response_headers
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Encoding:
              type: string
              default: gzip
            Content-Length:
              type: string
              default: 71
            Date:
              type: string
              default: Thu, 31 Mar 2016 11:14:18 GMT
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
            test:
              type: string
              default: response_headers
  /get:
    get:
      description: "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
      summary: GET Request
      tags:
      - Request Methods
      operationId: GetGet
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: test
        in: query
        required: true
        type: integer
        format: int32
        description: ''
      responses:
        200:
          description: ''
          headers: {}
  /post:
    post:
      description: "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested."
      summary: POST Request
      tags:
      - Request Methods
      operationId: PostPost
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: ''
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
  /put:
    put:
      description: "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
      summary: PUT Request
      tags:
      - Request Methods
      operationId: PutPut
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
  /patch:
    patch:
      description: "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
      summary: PATCH Request
      tags:
      - Request Methods
      operationId: PatchPatch
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
  /delete:
    delete:
      description: "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
      summary: DELETE Request
      tags:
      - Request Methods
      operationId: DeleteDelete
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: ''
        schema:
          type: string
      responses:
        200:
          description: ''
          headers: {}
  /status/200:
    get:
      description: "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`."
      summary: Response Status Code
      tags:
      - Utilities
      operationId: Status200Get
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/2002'
          examples:
            application/json; charset=utf-8:
              status: 200
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Length:
              type: string
              default: 14
            Date:
              type: string
              default: Thu, 31 Mar 2016 11:58:47 GMT
            ETag:
              type: string
              default: W/"e-1056260003"
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /stream/10:
    get:
      description: >-
        This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.


        A streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.
      summary: Streamed Response
      tags:
      - Utilities
      operationId: Stream10Get
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
  /delay/3:
    get:
      description: >-
        Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.


        Note that a maximum delay of 10 seconds is accepted by the server.
      summary: Delay Response
      tags:
      - Utilities
      operationId: Delay3Get
      deprecated: false
      produces:
      - application/json; charset=utf-8
      parameters: []
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/sampledelayresponse'
          examples:
            application/json; charset=utf-8:
              delay: 1
          headers:
            Access-Control-Allow-Credentials:
              type: string
              default: ''
            Access-Control-Allow-Headers:
              type: string
              default: ''
            Access-Control-Allow-Methods:
              type: string
              default: ''
            Access-Control-Allow-Origin:
              type: string
              default: ''
            Connection:
              type: string
              default: keep-alive
            Content-Length:
              type: string
              default: 13
            Date:
              type: string
              default: Thu, 31 Mar 2016 12:00:02 GMT
            ETag:
              type: string
              default: W/"d-2835810952"
            Server:
              type: string
              default: nginx/1.6.2
            Vary:
              type: string
              default: Accept-Encoding
            X-Powered-By:
              type: string
              default: Sails <sailsjs.org>
  /encoding/utf8:
    get:
      description: >-
        If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.


        This endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.
      summary: Get UTF8 Encoded Response
      tags:
      - Utilities
      operationId: EncodingUtf8Get
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
  /gzip:
    get:
      description: >-
        This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).

        The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.


        HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.

        To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.
      summary: GZip Compressed Response
      tags:
      - Utilities
      operationId: GzipGet
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
  /deflate:
    get:
      description: "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article."
      summary: Deflate Compressed Response
      tags:
      - Utilities
      operationId: DeflateGet
      deprecated: false
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
definitions:
  200:
    title: 200
    example:
      authenticated: true
    type: object
    properties:
      authenticated:
        type: boolean
    required:
    - authenticated
  Success:
    title: Success
    example:
      status: pass
      message: OAuth-1.0a signature verification was successful
    type: object
    properties:
      status:
        type: string
      message:
        type: string
    required:
    - status
    - message
  Cookies:
    title: Cookies
    example:
      cookies:
        foo1: bar
        foo2: bar
    type: object
    properties:
      cookies:
        $ref: '#/definitions/Cookies1'
    required:
    - cookies
  Cookies1:
    title: Cookies1
    example:
      foo1: bar
      foo2: bar
    type: object
    properties:
      foo1:
        type: string
      foo2:
        type: string
    required:
    - foo1
    - foo2
  CookiesResponse:
    title: CookiesResponse
    example:
      cookies:
        foo2: bar
    type: object
    properties:
      cookies:
        $ref: '#/definitions/Cookies2'
    required:
    - cookies
  Cookies2:
    title: Cookies2
    example:
      foo2: bar
    type: object
    properties:
      foo2:
        type: string
    required:
    - foo2
  Cookies3:
    title: Cookies3
    example:
      cookies:
        foo2: bar
    type: object
    properties:
      cookies:
        $ref: '#/definitions/Cookies2'
    required:
    - cookies
  my-sample-header:
    title: my-sample-header
    example:
      headers:
        host: echo.getpostman.com
        accept: '*/*'
        accept-encoding: gzip, deflate, sdch
        accept-language: en-US,en;q=0.8
        cache-control: no-cache
        my-sample-header: Lorem ipsum dolor sit amet
        postman-token: 3c8ea80b-f599-fba6-e0b4-a0910440e7b6
        user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36
        x-forwarded-port: 443
        x-forwarded-proto: https
    type: object
    properties:
      headers:
        $ref: '#/definitions/Headers'
    required:
    - headers
  Headers:
    title: Headers
    example:
      host: echo.getpostman.com
      accept: '*/*'
      accept-encoding: gzip, deflate, sdch
      accept-language: en-US,en;q=0.8
      cache-control: no-cache
      my-sample-header: Lorem ipsum dolor sit amet
      postman-token: 3c8ea80b-f599-fba6-e0b4-a0910440e7b6
      user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36
      x-forwarded-port: 443
      x-forwarded-proto: https
    type: object
    properties:
      host:
        type: string
      accept:
        type: string
      accept-encoding:
        type: string
      accept-language:
        type: string
      cache-control:
        type: string
      my-sample-header:
        type: string
      postman-token:
        type: string
      user-agent:
        type: string
      x-forwarded-port:
        type: string
      x-forwarded-proto:
        type: string
    required:
    - host
    - accept
    - accept-encoding
    - accept-language
    - cache-control
    - my-sample-header
    - postman-token
    - user-agent
    - x-forwarded-port
    - x-forwarded-proto
  Responseheaders:
    title: Responseheaders
    example:
      Content-Type: text/html
      test: response_headers
    type: object
    properties:
      Content-Type:
        type: string
      test:
        type: string
    required:
    - Content-Type
    - test
  2002:
    title: 2002
    example:
      status: 200
    type: object
    properties:
      status:
        type: integer
        format: int32
    required:
    - status
  sampledelayresponse:
    title: sampledelayresponse
    example:
      delay: 1
    type: object
    properties:
      delay:
        type: string
    required:
    - delay
security:
- auth: []
tags:
- name: 'Auth: Digest'
  description: >-
    Digest authentication protects an endpoint with a username and password without actually transmitting the password over network.

    One has to apply a hash function (like MD5, etc) to the username and password before sending them over the network.


    > Username: `postman`

    >

    > Password: `password`


    Unlike Basic-Auth, authentication happens using two consecutive requests where the first request returns `401 Unauthorised` along with `WWW-Authenticate` header containing information that needs to be used to authenticate subsequent calls.


    To know more about digest authentication, refer to the [Digest Access Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) wikipedia article.

    The article on [authentication helpers](https://www.getpostman.com/docs/helpers#digest-auth) elaborates how to use the same within the Postman app.
- name: 'Auth: Others'
- name: Cookies
  description: >-
    The cookie related endpoints allow one to get, set and delete simple cookies.


    Cookies are small snippets of information that is stored in the browser and sent back to the server with every subsequent requests in order to store useful information between requests.

    If you want to know more about cookies, read the [HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie) article on wikipedia.
- name: Headers
  description: >-
    The following set of endpoints allow one to see the headers being sent as part of a request and to get a custom set of headers as part of response.


    HTTP header fields provide required information about the request or response, or about the object sent in the message body. Both request headers and response headers can be controlled using these endpoints.
- name: Request Methods
  description: "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n"
- name: Utilities
